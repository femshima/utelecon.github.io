name: Test Report

on:
  workflow_run:
    workflows: ['Jekyll site CI']
    types:
      - completed
jobs:
  report:
    runs-on: ubuntu-latest
    steps:
    - name: Download artifact
      uses: actions/github-script@v6
      with:
        script: |
          let allArtifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.payload.workflow_run.id,
          });
          let matchArtifact = allArtifacts.data.artifacts.filter((artifact) => {
            return artifact.name == "report"
          })[0];
          let download = await github.rest.actions.downloadArtifact({
              owner: context.repo.owner,
              repo: context.repo.repo,
              artifact_id: matchArtifact.id,
              archive_format: 'zip',
          });
          let fs = require('fs');
          fs.writeFileSync(`${process.env.GITHUB_WORKSPACE}/report.zip`, Buffer.from(download.data));
    - name: Unzip artifact
      run: unzip -d _test/result report.zip
    - name: Upload Check
      uses: actions/github-script@v6
      with:
        script: |
          let fs = require('fs');
          const output = JSON.parse(fs.readFileSync('_test/result/github/html-proofer.json', 'utf-8'));

          let head_sha = context.sha;
          if (context.eventName === 'workflow_run') {
            head_sha = context.payload.workflow_run.head_commit.id;
          } else if (context.payload.pull_request) {
            head_sha = context.payload.pull_request.head.sha;
          }

          let conclusion = 'neutral';
          if (output.annotations.length > 0) conclusion = 'failure';

          let uploadResult = await github.rest.checks.create({
            head_sha,
            name: output.title,
            conclusion,
            status: 'completed',
            output,
            ...context.repo
          })
          core.info(`Check run status: ${uploadResult.status}`)
          core.info(`Check run URL: ${uploadResult.data.url}`)
          core.info(`Check run HTML: ${uploadResult.data.html_url}`)